{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///Users/janerasmus/Documents/Projects/insightbox-masterchef-demo/src/app/api/worldpop/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n\nconst WORLDPOP_BASE_URL = 'https://api.worldpop.org/v1';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { action, dataset, year, geojson, taskId } = body;\n\n    console.log(`WorldPop API Route: ${action} action`);\n    console.log('Request body:', { action, dataset, year, taskId });\n\n    if (action === 'submit') {\n      // Submit new WorldPop query using GET with URL parameters\n      const geojsonParam = encodeURIComponent(JSON.stringify(geojson));\n      const url = `${WORLDPOP_BASE_URL}/services/stats?dataset=${dataset}&year=${year}&geojson=${geojsonParam}`;\n      \n      console.log('WorldPop submit URL:', url);\n      \n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json'\n        }\n      });\n\n      console.log(`WorldPop submit response status: ${response.status}`);\n      console.log(`WorldPop submit response headers:`, Object.fromEntries(response.headers.entries()));\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('WorldPop submit error:', errorText);\n        return NextResponse.json(\n          { error: `WorldPop API error: ${response.status} ${response.statusText} - ${errorText}` },\n          { status: response.status }\n        );\n      }\n\n      const data = await response.json();\n      console.log('WorldPop task created:', data);\n\n      return NextResponse.json(data);\n\n    } else if (action === 'check') {\n      // Check task status using GET\n      const url = `${WORLDPOP_BASE_URL}/tasks/${taskId}`;\n      \n      console.log('WorldPop check URL:', url);\n      \n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json'\n        }\n      });\n\n      console.log(`WorldPop check response status: ${response.status}`);\n      console.log(`WorldPop check response headers:`, Object.fromEntries(response.headers.entries()));\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('WorldPop check error:', errorText);\n        return NextResponse.json(\n          { error: `WorldPop check error: ${response.status} ${response.statusText} - ${errorText}` },\n          { status: response.status }\n        );\n      }\n\n      const data = await response.json();\n      console.log('WorldPop task status:', data);\n      \n      // Log the actual data structure if it exists\n      if (data.data && data.data.agesexpyramid) {\n        console.log('ðŸ“Š Agesex pyramid data structure:');\n        console.log('First few items:', data.data.agesexpyramid.slice(0, 3));\n        console.log('Total items:', data.data.agesexpyramid.length);\n      }\n\n      return NextResponse.json(data);\n\n    } else {\n      return NextResponse.json(\n        { error: 'Invalid action. Use \"submit\" or \"check\".' },\n        { status: 400 }\n      );\n    }\n\n  } catch (error) {\n    console.error('WorldPop API route error:', error);\n    return NextResponse.json(\n      { error: `Server error: ${error instanceof Error ? error.message : 'Unknown error'}` },\n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":"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","debugId":null}}]
}