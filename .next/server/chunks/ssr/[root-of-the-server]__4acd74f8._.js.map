{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 13, "column": 0}, "map": {"version":3,"sources":["file:///Users/janerasmus/Documents/Projects/insightbox-masterchef-demo/src/lib/countries-client.ts"],"sourcesContent":["// REST Countries API Client\nexport interface CountryData {\n  name: {\n    common: string;\n    official: string;\n  };\n  population: number;\n  region: string;\n  subregion: string;\n  capital: string[];\n  area: number;\n  currencies: Record<string, {\n    name: string;\n    symbol: string;\n  }>;\n  languages: Record<string, string>;\n  flags: {\n    png: string;\n    svg: string;\n    alt: string;\n  };\n  latlng: [number, number];\n  // Optional fields that might not be available in all responses\n  continents?: string[];\n  timezones?: string[];\n  independent?: boolean;\n  unMember?: boolean;\n}\n\nexport class CountriesClient {\n  private baseUrl = 'https://restcountries.com/v3.1';\n\n  // Get country by ISO code (e.g., 'au' for Australia)\n  async getCountryByCode(code: string): Promise<CountryData> {\n    try {\n      console.log(`üåç Fetching country data for ISO code: ${code.toUpperCase()}`);\n\n      const response = await fetch(`${this.baseUrl}/alpha/${code.toLowerCase()}`);\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n\n      if (!Array.isArray(data) || data.length === 0) {\n        throw new Error(`No country found for ISO code: ${code}`);\n      }\n\n      const country = data[0];\n      console.log('‚úÖ Country data received:', {\n        name: country.name.common,\n        population: country.population,\n        region: country.region,\n        capital: country.capital[0]\n      });\n\n      return country;\n    } catch (error) {\n      console.error('‚ùå Error fetching country data:', error);\n      throw error;\n    }\n  }\n\n  // Get all countries with all available fields\n  async getAllCountries(): Promise<CountryData[]> {\n    try {\n      console.log('üåç Fetching all countries with complete data...');\n\n      // Use only the fields that work with the API\n      const fields = [\n        'name', 'population', 'region', 'subregion', 'capital', 'area',\n        'currencies', 'languages', 'flags', 'latlng'\n      ].join(',');\n\n      const response = await fetch(`${this.baseUrl}/all?fields=${fields}`);\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      console.log(`‚úÖ Received complete data for ${data.length} countries`);\n\n      return data;\n    } catch (error) {\n      console.error('‚ùå Error fetching all countries:', error);\n      throw error;\n    }\n  }\n\n  // Get countries by region\n  async getCountriesByRegion(region: string): Promise<CountryData[]> {\n    try {\n      console.log(`üåç Fetching countries in region: ${region}`);\n\n      const response = await fetch(`${this.baseUrl}/region/${region}`);\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      console.log(`‚úÖ Received data for ${data.length} countries in ${region}`);\n\n      return data;\n    } catch (error) {\n      console.error('‚ùå Error fetching countries by region:', error);\n      throw error;\n    }\n  }\n\n  // Get mock data for demo purposes\n  getMockCountryData(): CountryData {\n    return {\n      name: {\n        common: \"Australia\",\n        official: \"Commonwealth of Australia\"\n      },\n      population: 25687041,\n      region: \"Oceania\",\n      subregion: \"Australia and New Zealand\",\n      capital: [\"Canberra\"],\n      area: 7692024,\n      currencies: {\n        \"AUD\": {\n          name: \"Australian dollar\",\n          symbol: \"$\"\n        }\n      },\n      languages: {\n        \"eng\": \"English\"\n      },\n      flags: {\n        png: \"https://flagcdn.com/w320/au.png\",\n        svg: \"https://flagcdn.com/au.svg\",\n        alt: \"The flag of Australia has a dark blue field...\"\n      },\n      latlng: [-27, 133],\n      continents: [\"Oceania\"],\n      timezones: [\"UTC+05:00\", \"UTC+06:30\", \"UTC+07:00\", \"UTC+08:00\", \"UTC+09:30\", \"UTC+10:00\", \"UTC+10:30\", \"UTC+11:30\"],\n      independent: true,\n      unMember: true\n    };\n  }\n}\n\n// Test function\nexport async function testCountriesAPI() {\n  const client = new CountriesClient();\n\n  try {\n    console.log('üß™ Testing REST Countries API...');\n    const australia = await client.getCountryByCode('au');\n    console.log('‚úÖ Australia data:', {\n      name: australia.name.common,\n      population: australia.population.toLocaleString(),\n      region: australia.region,\n      capital: australia.capital[0],\n      area: australia.area.toLocaleString() + ' km¬≤'\n    });\n    return australia;\n  } catch (error) {\n    console.error('‚ùå Countries API test failed:', error);\n    return client.getMockCountryData();\n  }\n} "],"names":[],"mappings":"AAAA,4BAA4B;;;;;AA6BrB,MAAM;IACH,UAAU,iCAAiC;IAEnD,qDAAqD;IACrD,MAAM,iBAAiB,IAAY,EAAwB;QACzD,IAAI;YACF,QAAQ,GAAG,CAAC,CAAC,uCAAuC,EAAE,KAAK,WAAW,IAAI;YAE1E,MAAM,WAAW,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,WAAW,IAAI;YAE1E,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,MAAM,IAAI,MAAM,CAAC,KAAK,EAAE,SAAS,MAAM,CAAC,EAAE,EAAE,SAAS,UAAU,EAAE;YACnE;YAEA,MAAM,OAAO,MAAM,SAAS,IAAI;YAEhC,IAAI,CAAC,MAAM,OAAO,CAAC,SAAS,KAAK,MAAM,KAAK,GAAG;gBAC7C,MAAM,IAAI,MAAM,CAAC,+BAA+B,EAAE,MAAM;YAC1D;YAEA,MAAM,UAAU,IAAI,CAAC,EAAE;YACvB,QAAQ,GAAG,CAAC,4BAA4B;gBACtC,MAAM,QAAQ,IAAI,CAAC,MAAM;gBACzB,YAAY,QAAQ,UAAU;gBAC9B,QAAQ,QAAQ,MAAM;gBACtB,SAAS,QAAQ,OAAO,CAAC,EAAE;YAC7B;YAEA,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,kCAAkC;YAChD,MAAM;QACR;IACF;IAEA,8CAA8C;IAC9C,MAAM,kBAA0C;QAC9C,IAAI;YACF,QAAQ,GAAG,CAAC;YAEZ,6CAA6C;YAC7C,MAAM,SAAS;gBACb;gBAAQ;gBAAc;gBAAU;gBAAa;gBAAW;gBACxD;gBAAc;gBAAa;gBAAS;aACrC,CAAC,IAAI,CAAC;YAEP,MAAM,WAAW,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,QAAQ;YAEnE,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,MAAM,IAAI,MAAM,CAAC,KAAK,EAAE,SAAS,MAAM,CAAC,EAAE,EAAE,SAAS,UAAU,EAAE;YACnE;YAEA,MAAM,OAAO,MAAM,SAAS,IAAI;YAChC,QAAQ,GAAG,CAAC,CAAC,6BAA6B,EAAE,KAAK,MAAM,CAAC,UAAU,CAAC;YAEnE,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,mCAAmC;YACjD,MAAM;QACR;IACF;IAEA,0BAA0B;IAC1B,MAAM,qBAAqB,MAAc,EAA0B;QACjE,IAAI;YACF,QAAQ,GAAG,CAAC,CAAC,iCAAiC,EAAE,QAAQ;YAExD,MAAM,WAAW,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,QAAQ;YAE/D,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,MAAM,IAAI,MAAM,CAAC,KAAK,EAAE,SAAS,MAAM,CAAC,EAAE,EAAE,SAAS,UAAU,EAAE;YACnE;YAEA,MAAM,OAAO,MAAM,SAAS,IAAI;YAChC,QAAQ,GAAG,CAAC,CAAC,oBAAoB,EAAE,KAAK,MAAM,CAAC,cAAc,EAAE,QAAQ;YAEvE,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,yCAAyC;YACvD,MAAM;QACR;IACF;IAEA,kCAAkC;IAClC,qBAAkC;QAChC,OAAO;YACL,MAAM;gBACJ,QAAQ;gBACR,UAAU;YACZ;YACA,YAAY;YACZ,QAAQ;YACR,WAAW;YACX,SAAS;gBAAC;aAAW;YACrB,MAAM;YACN,YAAY;gBACV,OAAO;oBACL,MAAM;oBACN,QAAQ;gBACV;YACF;YACA,WAAW;gBACT,OAAO;YACT;YACA,OAAO;gBACL,KAAK;gBACL,KAAK;gBACL,KAAK;YACP;YACA,QAAQ;gBAAC,CAAC;gBAAI;aAAI;YAClB,YAAY;gBAAC;aAAU;YACvB,WAAW;gBAAC;gBAAa;gBAAa;gBAAa;gBAAa;gBAAa;gBAAa;gBAAa;aAAY;YACnH,aAAa;YACb,UAAU;QACZ;IACF;AACF;AAGO,eAAe;IACpB,MAAM,SAAS,IAAI;IAEnB,IAAI;QACF,QAAQ,GAAG,CAAC;QACZ,MAAM,YAAY,MAAM,OAAO,gBAAgB,CAAC;QAChD,QAAQ,GAAG,CAAC,qBAAqB;YAC/B,MAAM,UAAU,IAAI,CAAC,MAAM;YAC3B,YAAY,UAAU,UAAU,CAAC,cAAc;YAC/C,QAAQ,UAAU,MAAM;YACxB,SAAS,UAAU,OAAO,CAAC,EAAE;YAC7B,MAAM,UAAU,IAAI,CAAC,cAAc,KAAK;QAC1C;QACA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,OAAO,kBAAkB;IAClC;AACF","debugId":null}},
    {"offset": {"line": 162, "column": 0}, "map": {"version":3,"sources":["file:///Users/janerasmus/Documents/Projects/insightbox-masterchef-demo/src/lib/openai.ts"],"sourcesContent":["// OpenAI ChatGPT API Client\nexport interface ChatGPTResponse {\n  content: string;\n  role: string;\n}\n\nexport class OpenAIClient {\n  private apiKey: string;\n\n  constructor() {\n    this.apiKey = process.env.NEXT_PUBLIC_OPENAI_API_KEY || '';\n  }\n\n  async generateInsights(comparisonData: any, country1: string, country2: string): Promise<string> {\n    try {\n      console.log('ü§ñ Generating ChatGPT insights...');\n\n      const prompt = `Here are the results comparing two countries to see who wins, what can you tell me about the results that are interesting. You can use whatever reference you like to make the answer factual but interesting. Give me the response in this format:\n\n## Key Insights\n\n### Population Analysis\n[Your analysis of population differences and what they mean]\n\n### Geographic Comparison\n[Your analysis of area and density differences]\n\n### Historical Context\n[Interesting historical facts about these countries]\n\n### Economic Implications\n[What the population and area differences suggest about economic development]\n\n### Fun Facts\n[2-3 interesting facts about these countries]\n\n### Winner Summary\n[Overall assessment of which country \"wins\" and why]\n\n---\n\nCountry 1: ${country1}\nCountry 2: ${country2}\n\nComparison Data:\n${JSON.stringify(comparisonData, null, 2)}\n\nPlease provide a factual, interesting analysis based on this data.`;\n\n      const response = await fetch('/api/chatgpt', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          prompt,\n          comparisonData,\n          country1,\n          country2\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      console.log('‚úÖ ChatGPT insights generated');\n      \n      return data.content;\n    } catch (error) {\n      console.error('‚ùå Error generating ChatGPT insights:', error);\n      throw error;\n    }\n  }\n} "],"names":[],"mappings":"AAAA,4BAA4B;;;;AAMrB,MAAM;IACH,OAAe;IAEvB,aAAc;QACZ,IAAI,CAAC,MAAM,GAAG,QAAQ,GAAG,CAAC,0BAA0B,IAAI;IAC1D;IAEA,MAAM,iBAAiB,cAAmB,EAAE,QAAgB,EAAE,QAAgB,EAAmB;QAC/F,IAAI;YACF,QAAQ,GAAG,CAAC;YAEZ,MAAM,SAAS,CAAC;;;;;;;;;;;;;;;;;;;;;;;;WAwBX,EAAE,SAAS;WACX,EAAE,SAAS;;;AAGtB,EAAE,KAAK,SAAS,CAAC,gBAAgB,MAAM,GAAG;;kEAEwB,CAAC;YAE7D,MAAM,WAAW,MAAM,MAAM,gBAAgB;gBAC3C,QAAQ;gBACR,SAAS;oBACP,gBAAgB;gBAClB;gBACA,MAAM,KAAK,SAAS,CAAC;oBACnB;oBACA;oBACA;oBACA;gBACF;YACF;YAEA,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,MAAM,IAAI,MAAM,CAAC,KAAK,EAAE,SAAS,MAAM,CAAC,EAAE,EAAE,SAAS,UAAU,EAAE;YACnE;YAEA,MAAM,OAAO,MAAM,SAAS,IAAI;YAChC,QAAQ,GAAG,CAAC;YAEZ,OAAO,KAAK,OAAO;QACrB,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,wCAAwC;YACtD,MAAM;QACR;IACF;AACF","debugId":null}},
    {"offset": {"line": 233, "column": 0}, "map": {"version":3,"sources":["file:///Users/janerasmus/Documents/Projects/insightbox-masterchef-demo/src/app/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react';\nimport { CountriesClient, type CountryData } from '../lib/countries-client';\nimport { OpenAIClient } from '../lib/openai';\n\ninterface CountryInsight {\n  id: number;\n  title: string;\n  insight: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  tags: string[];\n  created_at: string;\n}\n\ninterface ComparisonMetric {\n  name: string;\n  value1: number;\n  value2: number;\n  unit: string;\n  winner: 'country1' | 'country2' | 'tie';\n}\n\nexport default function InsightBox() {\n  const [countries, setCountries] = useState<CountryData[]>([]);\n  const [insights, setInsights] = useState<CountryInsight[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [fetching, setFetching] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [sortBy, setSortBy] = useState<keyof CountryData>('name');\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc');\n  \n  // Comparison state\n  const [selectedCountry1, setSelectedCountry1] = useState<string>('');\n  const [selectedCountry2, setSelectedCountry2] = useState<string>('');\n  const [comparisonData, setComparisonData] = useState<ComparisonMetric[]>([]);\n  const [showComparison, setShowComparison] = useState(false);\n  \n  // ChatGPT insights state\n  const [chatGPTInsights, setChatGPTInsights] = useState<string>('');\n  const [generatingInsights, setGeneratingInsights] = useState(false);\n  const [showChatGPTInsights, setShowChatGPTInsights] = useState(false);\n\n  const countriesClient = new CountriesClient();\n  const openAIClient = new OpenAIClient();\n\n  // Fetch all countries data\n  const fetchAllCountries = async () => {\n    try {\n      setFetching(true);\n      console.log('üîÑ Fetching all countries from REST Countries API...');\n\n      const data = await countriesClient.getAllCountries();\n\n      console.log('‚úÖ Countries data received:', data.length, 'countries');\n      setCountries(data);\n\n      // Generate insights from the data\n      const generatedInsights = generateInsightsFromData(data);\n      setInsights(generatedInsights);\n\n    } catch (error) {\n      console.error('‚ùå Error fetching countries data:', error);\n      console.error('üîç Full error details:', error);\n      setLoading(false);\n      setFetching(false);\n\n      // Fallback to error insight\n      setInsights([\n        {\n          id: 1,\n          title: 'Countries API Error',\n          insight: `Failed to fetch countries data: ${error instanceof Error ? error.message : 'Unknown error'}. The API may be temporarily unavailable.`,\n          severity: 'medium',\n          tags: ['api', 'error'],\n          created_at: new Date().toISOString()\n        }\n      ]);\n      return;\n    } finally {\n      setLoading(false);\n      setFetching(false);\n    }\n  };\n\n  // Generate insights from countries data\n  const generateInsightsFromData = (data: CountryData[]): CountryInsight[] => {\n    const totalCountries = data.length;\n    const totalPopulation = data.reduce((sum, country) => sum + country.population, 0);\n    const regions = [...new Set(data.map(country => country.region))];\n    const independentCountries = data.filter(country => country.independent).length;\n    const unMembers = data.filter(country => country.unMember).length;\n\n    return [\n      {\n        id: 1,\n        title: 'Global Overview',\n        insight: `${totalCountries} countries with a total population of ${totalPopulation.toLocaleString()} people`,\n        severity: 'low',\n        tags: ['global', 'population'],\n        created_at: new Date().toISOString()\n      },\n      {\n        id: 2,\n        title: 'Geographic Distribution',\n        insight: `Countries spread across ${regions.length} regions: ${regions.join(', ')}`,\n        severity: 'low',\n        tags: ['geography', 'regions'],\n        created_at: new Date().toISOString()\n      },\n      {\n        id: 3,\n        title: 'Political Status',\n        insight: `${independentCountries} independent countries, ${unMembers} UN member states (data available for ${data.filter(c => c.independent !== undefined || c.unMember !== undefined).length} countries)`,\n        severity: 'low',\n        tags: ['politics', 'status'],\n        created_at: new Date().toISOString()\n      },\n      {\n        id: 4,\n        title: 'Population Statistics',\n        insight: `Average population per country: ${Math.round(totalPopulation / totalCountries).toLocaleString()} people`,\n        severity: 'low',\n        tags: ['demographics', 'statistics'],\n        created_at: new Date().toISOString()\n      },\n      {\n        id: 5,\n        title: 'Data Coverage',\n        insight: `Complete data for ${totalCountries} countries including flags, currencies, languages, and geographic coordinates`,\n        severity: 'low',\n        tags: ['data', 'coverage'],\n        created_at: new Date().toISOString()\n      }\n    ];\n  };\n\n  // Generate comparison metrics\n  const generateComparison = () => {\n    if (!selectedCountry1 || !selectedCountry2) return;\n\n    const country1 = countries.find(c => c.name.common === selectedCountry1);\n    const country2 = countries.find(c => c.name.common === selectedCountry2);\n\n    if (!country1 || !country2) return;\n\n    const metrics: ComparisonMetric[] = [\n      {\n        name: 'Population',\n        value1: country1.population,\n        value2: country2.population,\n        unit: 'people',\n        winner: country1.population > country2.population ? 'country1' : \n                country1.population < country2.population ? 'country2' : 'tie'\n      },\n      {\n        name: 'Area',\n        value1: country1.area || 0,\n        value2: country2.area || 0,\n        unit: 'km¬≤',\n        winner: (country1.area || 0) > (country2.area || 0) ? 'country1' : \n                (country1.area || 0) < (country2.area || 0) ? 'country2' : 'tie'\n      },\n      {\n        name: 'Population Density',\n        value1: country1.area ? Math.round(country1.population / country1.area) : 0,\n        value2: country2.area ? Math.round(country2.population / country2.area) : 0,\n        unit: 'people/km¬≤',\n        winner: (country1.area ? Math.round(country1.population / country1.area) : 0) > \n                (country2.area ? Math.round(country2.population / country2.area) : 0) ? 'country1' : \n                (country1.area ? Math.round(country1.population / country1.area) : 0) < \n                (country2.area ? Math.round(country2.population / country2.area) : 0) ? 'country2' : 'tie'\n      }\n    ];\n\n    setComparisonData(metrics);\n    setShowComparison(true);\n    setShowChatGPTInsights(false); // Hide previous insights when new comparison is made\n  };\n\n  // Generate ChatGPT insights\n  const generateChatGPTInsights = async () => {\n    if (!comparisonData.length || !selectedCountry1 || !selectedCountry2) return;\n\n    try {\n      setGeneratingInsights(true);\n      console.log('ü§ñ Generating ChatGPT insights...');\n\n      const insights = await openAIClient.generateInsights(\n        comparisonData,\n        selectedCountry1,\n        selectedCountry2\n      );\n\n      setChatGPTInsights(insights);\n      setShowChatGPTInsights(true);\n      console.log('‚úÖ ChatGPT insights generated successfully');\n\n    } catch (error) {\n      console.error('‚ùå Error generating ChatGPT insights:', error);\n      setChatGPTInsights('Failed to generate insights. Please try again.');\n      setShowChatGPTInsights(true);\n    } finally {\n      setGeneratingInsights(false);\n    }\n  };\n\n  // Filter and sort countries\n  const filteredAndSortedCountries = countries\n    .filter(country => \n      country.name.common.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      country.name.official.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      country.region.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      country.capital.some(cap => cap.toLowerCase().includes(searchTerm.toLowerCase()))\n    )\n    .sort((a, b) => {\n      let aValue: any = a[sortBy];\n      let bValue: any = b[sortBy];\n\n      // Handle nested objects\n      if (sortBy === 'name') {\n        aValue = a.name.common;\n        bValue = b.name.common;\n      }\n\n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sortOrder === 'asc' \n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue);\n      }\n\n      if (typeof aValue === 'number' && typeof bValue === 'number') {\n        return sortOrder === 'asc' ? aValue - bValue : bValue - aValue;\n      }\n\n      return 0;\n    });\n\n  useEffect(() => {\n    fetchAllCountries();\n  }, []);\n\n  const handleRefresh = () => {\n    setLoading(true);\n    fetchAllCountries();\n  };\n\n  const handleSort = (column: keyof CountryData) => {\n    if (sortBy === column) {\n      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortBy(column);\n      setSortOrder('asc');\n    }\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'critical': return 'bg-red-500 text-white';\n      case 'high': return 'bg-orange-500 text-white';\n      case 'medium': return 'bg-yellow-500 text-black';\n      case 'low': return 'bg-green-500 text-white';\n      default: return 'bg-gray-500 text-white';\n    }\n  };\n\n  const formatCurrency = (currencies: Record<string, { name: string; symbol: string }>) => {\n    return Object.entries(currencies)\n      .map(([code, currency]) => `${currency.name} (${currency.symbol})`)\n      .join(', ');\n  };\n\n  const formatLanguages = (languages: Record<string, string>) => {\n    return Object.values(languages).join(', ');\n  };\n\n  const getWinnerColor = (winner: string, isCountry1: boolean) => {\n    if (winner === 'tie') return 'bg-gray-200 text-gray-700';\n    if (winner === 'country1' && isCountry1) return 'bg-green-100 text-green-800';\n    if (winner === 'country2' && !isCountry1) return 'bg-green-100 text-green-800';\n    return 'bg-red-100 text-red-800';\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center\">\n        <div className=\"text-center text-white\">\n          <h1 className=\"text-6xl font-bold mb-4\">üç≥ InsightBox</h1>\n          <p className=\"text-xl mb-8\">\n            {fetching ? 'Fetching all countries data...' : 'Loading insights...'}\n          </p>\n          <div className=\"flex justify-center space-x-2\">\n            <span className=\"w-2 h-2 bg-white rounded-full animate-bounce\"></span>\n            <span className=\"w-2 h-2 bg-white rounded-full animate-bounce\" style={{animationDelay: '0.1s'}}></span>\n            <span className=\"w-2 h-2 bg-white rounded-full animate-bounce\" style={{animationDelay: '0.2s'}}></span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b\">\n        <div className=\"w-full px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-6\">\n            <div className=\"flex items-center\">\n              <h1 className=\"text-3xl font-bold text-gray-900\">üç≥ InsightBox</h1>\n              <span className=\"ml-3 px-3 py-1 bg-blue-100 text-blue-800 text-sm font-medium rounded-full\">\n                MasterDev Edition\n              </span>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <button\n                onClick={handleRefresh}\n                disabled={loading}\n                className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50\"\n              >\n                {loading ? 'Refreshing...' : 'Refresh Data'}\n              </button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"w-full px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Country Comparison Section */}\n        <div className=\"bg-white rounded-lg shadow p-6 mb-8\">\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">üåç Country Comparison</h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Select First Country\n              </label>\n              <select\n                value={selectedCountry1}\n                onChange={(e) => setSelectedCountry1(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              >\n                <option value=\"\">Choose a country...</option>\n                {countries.map((country) => (\n                  <option key={country.name.common} value={country.name.common}>\n                    {country.name.common}\n                  </option>\n                ))}\n              </select>\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Select Second Country\n              </label>\n              <select\n                value={selectedCountry2}\n                onChange={(e) => setSelectedCountry2(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              >\n                <option value=\"\">Choose a country...</option>\n                {countries.map((country) => (\n                  <option key={country.name.common} value={country.name.common}>\n                    {country.name.common}\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n          \n          <div className=\"flex space-x-4\">\n            <button\n              onClick={generateComparison}\n              disabled={!selectedCountry1 || !selectedCountry2}\n              className=\"px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors disabled:opacity-50\"\n            >\n              Compare Countries\n            </button>\n            \n            {showComparison && comparisonData.length > 0 && (\n              <button\n                onClick={generateChatGPTInsights}\n                disabled={generatingInsights}\n                className=\"px-6 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors disabled:opacity-50\"\n              >\n                {generatingInsights ? 'Generating Insights...' : 'ü§ñ Get AI Insights'}\n              </button>\n            )}\n          </div>\n        </div>\n\n        {/* ChatGPT Insights */}\n        {showChatGPTInsights && chatGPTInsights && (\n          <div className=\"bg-white rounded-lg shadow p-6 mb-8\">\n            <h3 className=\"text-xl font-bold text-gray-900 mb-6\">ü§ñ AI Analysis</h3>\n            <div className=\"prose max-w-none\">\n              <div \n                className=\"markdown-content\"\n                dangerouslySetInnerHTML={{ \n                  __html: chatGPTInsights\n                    .replace(/\\n/g, '<br>')\n                    .replace(/## (.*?)\\n/g, '<h2 class=\"text-xl font-bold text-gray-900 mt-6 mb-3\">$1</h2>')\n                    .replace(/### (.*?)\\n/g, '<h3 class=\"text-lg font-semibold text-gray-800 mt-4 mb-2\">$1</h3>')\n                    .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\n                    .replace(/\\*(.*?)\\*/g, '<em>$1</em>')\n                }}\n              />\n            </div>\n          </div>\n        )}\n\n        {/* Comparison Results */}\n        {showComparison && comparisonData.length > 0 && (\n          <div className=\"bg-white rounded-lg shadow p-6 mb-8\">\n            <h3 className=\"text-xl font-bold text-gray-900 mb-6\">üìä Comparison Results</h3>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              {comparisonData.map((metric, index) => (\n                <div key={index} className=\"bg-gray-50 rounded-lg p-4\">\n                  <h4 className=\"text-lg font-semibold text-gray-900 mb-4\">{metric.name}</h4>\n                  \n                  <div className=\"space-y-3\">\n                    <div className={`p-3 rounded-lg ${getWinnerColor(metric.winner, true)}`}>\n                      <div className=\"text-sm font-medium\">{selectedCountry1}</div>\n                      <div className=\"text-2xl font-bold\">\n                        {metric.value1.toLocaleString()} {metric.unit}\n                      </div>\n                    </div>\n                    \n                    <div className=\"text-center text-gray-500\">vs</div>\n                    \n                    <div className={`p-3 rounded-lg ${getWinnerColor(metric.winner, false)}`}>\n                      <div className=\"text-sm font-medium\">{selectedCountry2}</div>\n                      <div className=\"text-2xl font-bold\">\n                        {metric.value2.toLocaleString()} {metric.unit}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"mt-4 text-center\">\n                    {metric.winner === 'tie' ? (\n                      <span className=\"inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-100 text-gray-800\">\n                        üèÜ Tie\n                      </span>\n                    ) : (\n                      <span className=\"inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800\">\n                        üèÜ Winner: {metric.winner === 'country1' ? selectedCountry1 : selectedCountry2}\n                      </span>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Search and Filter */}\n        <div className=\"mb-6\">\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <input\n                type=\"text\"\n                placeholder=\"Search countries by name, region, or capital...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              />\n            </div>\n            <div className=\"text-sm text-gray-600\">\n              Showing {filteredAndSortedCountries.length} of {countries.length} countries\n            </div>\n          </div>\n        </div>\n\n        {/* Countries Table */}\n        <div className=\"bg-white rounded-lg shadow overflow-hidden w-full\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100\" onClick={() => handleSort('name')}>\n                    <div className=\"flex items-center\">\n                      Flag & Name\n                      {sortBy === 'name' && (\n                        <span className=\"ml-1\">{sortOrder === 'asc' ? '‚Üë' : '‚Üì'}</span>\n                      )}\n                    </div>\n                  </th>\n                  <th className=\"px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100\" onClick={() => handleSort('population')}>\n                    <div className=\"flex items-center\">\n                      Population\n                      {sortBy === 'population' && (\n                        <span className=\"ml-1\">{sortOrder === 'asc' ? '‚Üë' : '‚Üì'}</span>\n                      )}\n                    </div>\n                  </th>\n                  <th className=\"px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100\" onClick={() => handleSort('region')}>\n                    <div className=\"flex items-center\">\n                      Region\n                      {sortBy === 'region' && (\n                        <span className=\"ml-1\">{sortOrder === 'asc' ? '‚Üë' : '‚Üì'}</span>\n                      )}\n                    </div>\n                  </th>\n                  <th className=\"px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Capital\n                  </th>\n                  <th className=\"px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100\" onClick={() => handleSort('area')}>\n                    <div className=\"flex items-center\">\n                      Area (km¬≤)\n                      {sortBy === 'area' && (\n                        <span className=\"ml-1\">{sortOrder === 'asc' ? '‚Üë' : '‚Üì'}</span>\n                      )}\n                    </div>\n                  </th>\n                  <th className=\"px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Currencies\n                  </th>\n                  <th className=\"px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Languages\n                  </th>\n                  <th className=\"px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Timezones\n                  </th>\n                  <th className=\"px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Status\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {filteredAndSortedCountries.map((country, index) => (\n                  <tr key={index} className=\"hover:bg-gray-50\">\n                    <td className=\"px-3 py-2 whitespace-nowrap\">\n                      <div className=\"flex items-center\">\n                        <img\n                          src={country.flags.png}\n                          alt={country.flags.alt}\n                          className=\"w-6 h-4 object-cover rounded mr-2\"\n                        />\n                        <div>\n                          <div className=\"text-sm font-medium text-gray-900\">{country.name.common}</div>\n                          <div className=\"text-xs text-gray-500\">{country.name.official}</div>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-3 py-2 whitespace-nowrap text-sm text-gray-900\">\n                      {country.population.toLocaleString()}\n                    </td>\n                    <td className=\"px-3 py-2 whitespace-nowrap text-sm text-gray-900\">\n                      <div>\n                        <div>{country.region}</div>\n                        {country.subregion && (\n                          <div className=\"text-xs text-gray-500\">{country.subregion}</div>\n                        )}\n                      </div>\n                    </td>\n                    <td className=\"px-3 py-2 whitespace-nowrap text-sm text-gray-900\">\n                      {country.capital.join(', ')}\n                    </td>\n                    <td className=\"px-3 py-2 whitespace-nowrap text-sm text-gray-900\">\n                      {country.area ? country.area.toLocaleString() : 'N/A'}\n                    </td>\n                    <td className=\"px-3 py-2 whitespace-nowrap text-sm text-gray-900\">\n                      <div className=\"max-w-xs truncate\">\n                        {country.currencies ? formatCurrency(country.currencies) : 'N/A'}\n                      </div>\n                    </td>\n                    <td className=\"px-3 py-2 whitespace-nowrap text-sm text-gray-900\">\n                      <div className=\"max-w-xs truncate\">\n                        {country.languages ? formatLanguages(country.languages) : 'N/A'}\n                      </div>\n                    </td>\n                    <td className=\"px-3 py-2 whitespace-nowrap text-sm text-gray-900\">\n                      <div className=\"max-w-xs truncate\">\n                        {country.timezones ? country.timezones.join(', ') : 'N/A'}\n                      </div>\n                    </td>\n                    <td className=\"px-3 py-2 whitespace-nowrap text-sm text-gray-900\">\n                      <div className=\"flex flex-col space-y-1\">\n                        {country.independent && (\n                          <span className=\"inline-flex items-center px-1 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                            Independent\n                          </span>\n                        )}\n                        {country.unMember && (\n                          <span className=\"inline-flex items-center px-1 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800\">\n                            UN Member\n                          </span>\n                        )}\n                        {!country.independent && !country.unMember && (\n                          <span className=\"text-xs text-gray-500\">N/A</span>\n                        )}\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n\n        {/* Insights Grid */}\n        <div className=\"mt-8 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {insights.map((insight) => (\n            <div key={insight.id} className=\"bg-white rounded-lg shadow hover:shadow-lg transition-shadow\">\n              <div className=\"p-6\">\n                <div className=\"flex items-start justify-between mb-4\">\n                  <h3 className=\"text-lg font-semibold text-gray-900\">{insight.title}</h3>\n                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${getSeverityColor(insight.severity)}`}>\n                    {insight.severity}\n                  </span>\n                </div>\n                <p className=\"text-gray-600 mb-4\">{insight.insight}</p>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex flex-wrap gap-1\">\n                    {insight.tags.map((tag, index) => (\n                      <span key={index} className=\"px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded\">\n                        {tag}\n                      </span>\n                    ))}\n                  </div>\n                  <span className=\"text-xs text-gray-400\">\n                    {new Date(insight.created_at).toLocaleDateString()}\n                  </span>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {countries.length === 0 && (\n          <div className=\"text-center py-12\">\n            <div className=\"text-6xl mb-4\">üç≥</div>\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">No data available</h3>\n            <p className=\"text-gray-600 mb-6\">Click \"Refresh Data\" to fetch all countries</p>\n            <button\n              onClick={handleRefresh}\n              disabled={loading}\n              className=\"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50\"\n            >\n              {loading ? 'Fetching...' : 'Fetch All Countries'}\n            </button>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n} "],"names":[],"mappings":"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","debugId":null}}]
}