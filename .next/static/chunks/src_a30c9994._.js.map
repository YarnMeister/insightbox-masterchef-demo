{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/janerasmus/Documents/Projects/insightbox-masterchef-demo/src/lib/countries-client.ts"],"sourcesContent":["// REST Countries API Client\nexport interface CountryData {\n  name: {\n    common: string;\n    official: string;\n  };\n  population: number;\n  region: string;\n  subregion: string;\n  capital: string[];\n  area: number;\n  currencies: Record<string, {\n    name: string;\n    symbol: string;\n  }>;\n  languages: Record<string, string>;\n  flags: {\n    png: string;\n    svg: string;\n    alt: string;\n  };\n  latlng: [number, number];\n  // Optional fields that might not be available in all responses\n  continents?: string[];\n  timezones?: string[];\n  independent?: boolean;\n  unMember?: boolean;\n}\n\nexport class CountriesClient {\n  private baseUrl = 'https://restcountries.com/v3.1';\n\n  // Get country by ISO code (e.g., 'au' for Australia)\n  async getCountryByCode(code: string): Promise<CountryData> {\n    try {\n      console.log(`üåç Fetching country data for ISO code: ${code.toUpperCase()}`);\n\n      const response = await fetch(`${this.baseUrl}/alpha/${code.toLowerCase()}`);\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n\n      if (!Array.isArray(data) || data.length === 0) {\n        throw new Error(`No country found for ISO code: ${code}`);\n      }\n\n      const country = data[0];\n      console.log('‚úÖ Country data received:', {\n        name: country.name.common,\n        population: country.population,\n        region: country.region,\n        capital: country.capital[0]\n      });\n\n      return country;\n    } catch (error) {\n      console.error('‚ùå Error fetching country data:', error);\n      throw error;\n    }\n  }\n\n  // Get all countries with all available fields\n  async getAllCountries(): Promise<CountryData[]> {\n    try {\n      console.log('üåç Fetching all countries with complete data...');\n\n      // Use only the fields that work with the API\n      const fields = [\n        'name', 'population', 'region', 'subregion', 'capital', 'area',\n        'currencies', 'languages', 'flags', 'latlng'\n      ].join(',');\n\n      const response = await fetch(`${this.baseUrl}/all?fields=${fields}`);\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      console.log(`‚úÖ Received complete data for ${data.length} countries`);\n\n      return data;\n    } catch (error) {\n      console.error('‚ùå Error fetching all countries:', error);\n      throw error;\n    }\n  }\n\n  // Get countries by region\n  async getCountriesByRegion(region: string): Promise<CountryData[]> {\n    try {\n      console.log(`üåç Fetching countries in region: ${region}`);\n\n      const response = await fetch(`${this.baseUrl}/region/${region}`);\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      console.log(`‚úÖ Received data for ${data.length} countries in ${region}`);\n\n      return data;\n    } catch (error) {\n      console.error('‚ùå Error fetching countries by region:', error);\n      throw error;\n    }\n  }\n\n  // Get mock data for demo purposes\n  getMockCountryData(): CountryData {\n    return {\n      name: {\n        common: \"Australia\",\n        official: \"Commonwealth of Australia\"\n      },\n      population: 25687041,\n      region: \"Oceania\",\n      subregion: \"Australia and New Zealand\",\n      capital: [\"Canberra\"],\n      area: 7692024,\n      currencies: {\n        \"AUD\": {\n          name: \"Australian dollar\",\n          symbol: \"$\"\n        }\n      },\n      languages: {\n        \"eng\": \"English\"\n      },\n      flags: {\n        png: \"https://flagcdn.com/w320/au.png\",\n        svg: \"https://flagcdn.com/au.svg\",\n        alt: \"The flag of Australia has a dark blue field...\"\n      },\n      latlng: [-27, 133],\n      continents: [\"Oceania\"],\n      timezones: [\"UTC+05:00\", \"UTC+06:30\", \"UTC+07:00\", \"UTC+08:00\", \"UTC+09:30\", \"UTC+10:00\", \"UTC+10:30\", \"UTC+11:30\"],\n      independent: true,\n      unMember: true\n    };\n  }\n}\n\n// Test function\nexport async function testCountriesAPI() {\n  const client = new CountriesClient();\n\n  try {\n    console.log('üß™ Testing REST Countries API...');\n    const australia = await client.getCountryByCode('au');\n    console.log('‚úÖ Australia data:', {\n      name: australia.name.common,\n      population: australia.population.toLocaleString(),\n      region: australia.region,\n      capital: australia.capital[0],\n      area: australia.area.toLocaleString() + ' km¬≤'\n    });\n    return australia;\n  } catch (error) {\n    console.error('‚ùå Countries API test failed:', error);\n    return client.getMockCountryData();\n  }\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":["file:///Users/janerasmus/Documents/Projects/insightbox-masterchef-demo/src/app/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react';\nimport { CountriesClient, type CountryData } from '../lib/countries-client';\n\ninterface CountryInsight {\n  id: number;\n  title: string;\n  insight: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  tags: string[];\n  created_at: string;\n}\n\ninterface ComparisonMetric {\n  name: string;\n  value1: number;\n  value2: number;\n  unit: string;\n  winner: 'country1' | 'country2' | 'tie';\n}\n\nexport default function InsightBox() {\n  const [countries, setCountries] = useState<CountryData[]>([]);\n  const [insights, setInsights] = useState<CountryInsight[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [fetching, setFetching] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [sortBy, setSortBy] = useState<keyof CountryData>('name');\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc');\n  \n  // Comparison state\n  const [selectedCountry1, setSelectedCountry1] = useState<string>('');\n  const [selectedCountry2, setSelectedCountry2] = useState<string>('');\n  const [comparisonData, setComparisonData] = useState<ComparisonMetric[]>([]);\n  const [showComparison, setShowComparison] = useState(false);\n\n  const countriesClient = new CountriesClient();\n\n  // Fetch all countries data\n  const fetchAllCountries = async () => {\n    try {\n      setFetching(true);\n      console.log('üîÑ Fetching all countries from REST Countries API...');\n\n      const data = await countriesClient.getAllCountries();\n\n      console.log('‚úÖ Countries data received:', data.length, 'countries');\n      setCountries(data);\n\n      // Generate insights from the data\n      const generatedInsights = generateInsightsFromData(data);\n      setInsights(generatedInsights);\n\n    } catch (error) {\n      console.error('‚ùå Error fetching countries data:', error);\n      console.error('üîç Full error details:', error);\n      setLoading(false);\n      setFetching(false);\n\n      // Fallback to error insight\n      setInsights([\n        {\n          id: 1,\n          title: 'Countries API Error',\n          insight: `Failed to fetch countries data: ${error instanceof Error ? error.message : 'Unknown error'}. The API may be temporarily unavailable.`,\n          severity: 'medium',\n          tags: ['api', 'error'],\n          created_at: new Date().toISOString()\n        }\n      ]);\n      return;\n    } finally {\n      setLoading(false);\n      setFetching(false);\n    }\n  };\n\n  // Generate insights from countries data\n  const generateInsightsFromData = (data: CountryData[]): CountryInsight[] => {\n    const totalCountries = data.length;\n    const totalPopulation = data.reduce((sum, country) => sum + country.population, 0);\n    const regions = [...new Set(data.map(country => country.region))];\n    const independentCountries = data.filter(country => country.independent).length;\n    const unMembers = data.filter(country => country.unMember).length;\n\n    return [\n      {\n        id: 1,\n        title: 'Global Overview',\n        insight: `${totalCountries} countries with a total population of ${totalPopulation.toLocaleString()} people`,\n        severity: 'low',\n        tags: ['global', 'population'],\n        created_at: new Date().toISOString()\n      },\n      {\n        id: 2,\n        title: 'Geographic Distribution',\n        insight: `Countries spread across ${regions.length} regions: ${regions.join(', ')}`,\n        severity: 'low',\n        tags: ['geography', 'regions'],\n        created_at: new Date().toISOString()\n      },\n      {\n        id: 3,\n        title: 'Political Status',\n        insight: `${independentCountries} independent countries, ${unMembers} UN member states (data available for ${data.filter(c => c.independent !== undefined || c.unMember !== undefined).length} countries)`,\n        severity: 'low',\n        tags: ['politics', 'status'],\n        created_at: new Date().toISOString()\n      },\n      {\n        id: 4,\n        title: 'Population Statistics',\n        insight: `Average population per country: ${Math.round(totalPopulation / totalCountries).toLocaleString()} people`,\n        severity: 'low',\n        tags: ['demographics', 'statistics'],\n        created_at: new Date().toISOString()\n      },\n      {\n        id: 5,\n        title: 'Data Coverage',\n        insight: `Complete data for ${totalCountries} countries including flags, currencies, languages, and geographic coordinates`,\n        severity: 'low',\n        tags: ['data', 'coverage'],\n        created_at: new Date().toISOString()\n      }\n    ];\n  };\n\n  // Generate comparison metrics\n  const generateComparison = () => {\n    if (!selectedCountry1 || !selectedCountry2) return;\n\n    const country1 = countries.find(c => c.name.common === selectedCountry1);\n    const country2 = countries.find(c => c.name.common === selectedCountry2);\n\n    if (!country1 || !country2) return;\n\n    const metrics: ComparisonMetric[] = [\n      {\n        name: 'Population',\n        value1: country1.population,\n        value2: country2.population,\n        unit: 'people',\n        winner: country1.population > country2.population ? 'country1' : \n                country1.population < country2.population ? 'country2' : 'tie'\n      },\n      {\n        name: 'Area',\n        value1: country1.area || 0,\n        value2: country2.area || 0,\n        unit: 'km¬≤',\n        winner: (country1.area || 0) > (country2.area || 0) ? 'country1' : \n                (country1.area || 0) < (country2.area || 0) ? 'country2' : 'tie'\n      },\n      {\n        name: 'Population Density',\n        value1: country1.area ? Math.round(country1.population / country1.area) : 0,\n        value2: country2.area ? Math.round(country2.population / country2.area) : 0,\n        unit: 'people/km¬≤',\n        winner: (country1.area ? Math.round(country1.population / country1.area) : 0) > \n                (country2.area ? Math.round(country2.population / country2.area) : 0) ? 'country1' : \n                (country1.area ? Math.round(country1.population / country1.area) : 0) < \n                (country2.area ? Math.round(country2.population / country2.area) : 0) ? 'country2' : 'tie'\n      }\n    ];\n\n    setComparisonData(metrics);\n    setShowComparison(true);\n  };\n\n  // Filter and sort countries\n  const filteredAndSortedCountries = countries\n    .filter(country => \n      country.name.common.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      country.name.official.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      country.region.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      country.capital.some(cap => cap.toLowerCase().includes(searchTerm.toLowerCase()))\n    )\n    .sort((a, b) => {\n      let aValue: any = a[sortBy];\n      let bValue: any = b[sortBy];\n\n      // Handle nested objects\n      if (sortBy === 'name') {\n        aValue = a.name.common;\n        bValue = b.name.common;\n      }\n\n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sortOrder === 'asc' \n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue);\n      }\n\n      if (typeof aValue === 'number' && typeof bValue === 'number') {\n        return sortOrder === 'asc' ? aValue - bValue : bValue - aValue;\n      }\n\n      return 0;\n    });\n\n  useEffect(() => {\n    fetchAllCountries();\n  }, []);\n\n  const handleRefresh = () => {\n    setLoading(true);\n    fetchAllCountries();\n  };\n\n  const handleSort = (column: keyof CountryData) => {\n    if (sortBy === column) {\n      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortBy(column);\n      setSortOrder('asc');\n    }\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'critical': return 'bg-red-500 text-white';\n      case 'high': return 'bg-orange-500 text-white';\n      case 'medium': return 'bg-yellow-500 text-black';\n      case 'low': return 'bg-green-500 text-white';\n      default: return 'bg-gray-500 text-white';\n    }\n  };\n\n  const formatCurrency = (currencies: Record<string, { name: string; symbol: string }>) => {\n    return Object.entries(currencies)\n      .map(([code, currency]) => `${currency.name} (${currency.symbol})`)\n      .join(', ');\n  };\n\n  const formatLanguages = (languages: Record<string, string>) => {\n    return Object.values(languages).join(', ');\n  };\n\n  const getWinnerColor = (winner: string, isCountry1: boolean) => {\n    if (winner === 'tie') return 'bg-gray-200 text-gray-700';\n    if (winner === 'country1' && isCountry1) return 'bg-green-100 text-green-800';\n    if (winner === 'country2' && !isCountry1) return 'bg-green-100 text-green-800';\n    return 'bg-red-100 text-red-800';\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center\">\n        <div className=\"text-center text-white\">\n          <h1 className=\"text-6xl font-bold mb-4\">üç≥ InsightBox</h1>\n          <p className=\"text-xl mb-8\">\n            {fetching ? 'Fetching all countries data...' : 'Loading insights...'}\n          </p>\n          <div className=\"flex justify-center space-x-2\">\n            <span className=\"w-2 h-2 bg-white rounded-full animate-bounce\"></span>\n            <span className=\"w-2 h-2 bg-white rounded-full animate-bounce\" style={{animationDelay: '0.1s'}}></span>\n            <span className=\"w-2 h-2 bg-white rounded-full animate-bounce\" style={{animationDelay: '0.2s'}}></span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-6\">\n            <div className=\"flex items-center\">\n              <h1 className=\"text-3xl font-bold text-gray-900\">üç≥ InsightBox</h1>\n              <span className=\"ml-3 px-3 py-1 bg-blue-100 text-blue-800 text-sm font-medium rounded-full\">\n                MasterDev Edition\n              </span>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <button\n                onClick={handleRefresh}\n                disabled={loading}\n                className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50\"\n              >\n                {loading ? 'Refreshing...' : 'Refresh Data'}\n              </button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Country Comparison Section */}\n        <div className=\"bg-white rounded-lg shadow p-6 mb-8\">\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">üåç Country Comparison</h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Select First Country\n              </label>\n              <select\n                value={selectedCountry1}\n                onChange={(e) => setSelectedCountry1(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              >\n                <option value=\"\">Choose a country...</option>\n                {countries.map((country) => (\n                  <option key={country.name.common} value={country.name.common}>\n                    {country.name.common}\n                  </option>\n                ))}\n              </select>\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Select Second Country\n              </label>\n              <select\n                value={selectedCountry2}\n                onChange={(e) => setSelectedCountry2(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              >\n                <option value=\"\">Choose a country...</option>\n                {countries.map((country) => (\n                  <option key={country.name.common} value={country.name.common}>\n                    {country.name.common}\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n          \n          <button\n            onClick={generateComparison}\n            disabled={!selectedCountry1 || !selectedCountry2}\n            className=\"px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors disabled:opacity-50\"\n          >\n            Compare Countries\n          </button>\n        </div>\n\n        {/* Comparison Results */}\n        {showComparison && comparisonData.length > 0 && (\n          <div className=\"bg-white rounded-lg shadow p-6 mb-8\">\n            <h3 className=\"text-xl font-bold text-gray-900 mb-6\">üìä Comparison Results</h3>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              {comparisonData.map((metric, index) => (\n                <div key={index} className=\"bg-gray-50 rounded-lg p-4\">\n                  <h4 className=\"text-lg font-semibold text-gray-900 mb-4\">{metric.name}</h4>\n                  \n                  <div className=\"space-y-3\">\n                    <div className={`p-3 rounded-lg ${getWinnerColor(metric.winner, true)}`}>\n                      <div className=\"text-sm font-medium\">{selectedCountry1}</div>\n                      <div className=\"text-2xl font-bold\">\n                        {metric.value1.toLocaleString()} {metric.unit}\n                      </div>\n                    </div>\n                    \n                    <div className=\"text-center text-gray-500\">vs</div>\n                    \n                    <div className={`p-3 rounded-lg ${getWinnerColor(metric.winner, false)}`}>\n                      <div className=\"text-sm font-medium\">{selectedCountry2}</div>\n                      <div className=\"text-2xl font-bold\">\n                        {metric.value2.toLocaleString()} {metric.unit}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"mt-4 text-center\">\n                    {metric.winner === 'tie' ? (\n                      <span className=\"inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-100 text-gray-800\">\n                        üèÜ Tie\n                      </span>\n                    ) : (\n                      <span className=\"inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800\">\n                        üèÜ Winner: {metric.winner === 'country1' ? selectedCountry1 : selectedCountry2}\n                      </span>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Search and Filter */}\n        <div className=\"mb-6\">\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <input\n                type=\"text\"\n                placeholder=\"Search countries by name, region, or capital...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              />\n            </div>\n            <div className=\"text-sm text-gray-600\">\n              Showing {filteredAndSortedCountries.length} of {countries.length} countries\n            </div>\n          </div>\n        </div>\n\n        {/* Countries Table */}\n        <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100\" onClick={() => handleSort('name')}>\n                    <div className=\"flex items-center\">\n                      Flag & Name\n                      {sortBy === 'name' && (\n                        <span className=\"ml-1\">{sortOrder === 'asc' ? '‚Üë' : '‚Üì'}</span>\n                      )}\n                    </div>\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100\" onClick={() => handleSort('population')}>\n                    <div className=\"flex items-center\">\n                      Population\n                      {sortBy === 'population' && (\n                        <span className=\"ml-1\">{sortOrder === 'asc' ? '‚Üë' : '‚Üì'}</span>\n                      )}\n                    </div>\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100\" onClick={() => handleSort('region')}>\n                    <div className=\"flex items-center\">\n                      Region\n                      {sortBy === 'region' && (\n                        <span className=\"ml-1\">{sortOrder === 'asc' ? '‚Üë' : '‚Üì'}</span>\n                      )}\n                    </div>\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Capital\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100\" onClick={() => handleSort('area')}>\n                    <div className=\"flex items-center\">\n                      Area (km¬≤)\n                      {sortBy === 'area' && (\n                        <span className=\"ml-1\">{sortOrder === 'asc' ? '‚Üë' : '‚Üì'}</span>\n                      )}\n                    </div>\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Currencies\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Languages\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Timezones\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Status\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {filteredAndSortedCountries.map((country, index) => (\n                  <tr key={index} className=\"hover:bg-gray-50\">\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"flex items-center\">\n                        <img\n                          src={country.flags.png}\n                          alt={country.flags.alt}\n                          className=\"w-8 h-6 object-cover rounded mr-3\"\n                        />\n                        <div>\n                          <div className=\"text-sm font-medium text-gray-900\">{country.name.common}</div>\n                          <div className=\"text-sm text-gray-500\">{country.name.official}</div>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {country.population.toLocaleString()}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {country.region}\n                      {country.subregion && (\n                        <div className=\"text-xs text-gray-500\">{country.subregion}</div>\n                      )}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {country.capital.join(', ')}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {country.area ? country.area.toLocaleString() : 'N/A'}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {country.currencies ? formatCurrency(country.currencies) : 'N/A'}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {country.languages ? formatLanguages(country.languages) : 'N/A'}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      <div className=\"max-w-xs truncate\">\n                        {country.timezones ? country.timezones.join(', ') : 'N/A'}\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      <div className=\"flex flex-col space-y-1\">\n                        {country.independent && (\n                          <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                            Independent\n                          </span>\n                        )}\n                        {country.unMember && (\n                          <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800\">\n                            UN Member\n                          </span>\n                        )}\n                        {!country.independent && !country.unMember && (\n                          <span className=\"text-xs text-gray-500\">N/A</span>\n                        )}\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n\n        {/* Insights Grid */}\n        <div className=\"mt-8 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {insights.map((insight) => (\n            <div key={insight.id} className=\"bg-white rounded-lg shadow hover:shadow-lg transition-shadow\">\n              <div className=\"p-6\">\n                <div className=\"flex items-start justify-between mb-4\">\n                  <h3 className=\"text-lg font-semibold text-gray-900\">{insight.title}</h3>\n                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${getSeverityColor(insight.severity)}`}>\n                    {insight.severity}\n                  </span>\n                </div>\n                <p className=\"text-gray-600 mb-4\">{insight.insight}</p>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex flex-wrap gap-1\">\n                    {insight.tags.map((tag, index) => (\n                      <span key={index} className=\"px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded\">\n                        {tag}\n                      </span>\n                    ))}\n                  </div>\n                  <span className=\"text-xs text-gray-400\">\n                    {new Date(insight.created_at).toLocaleDateString()}\n                  </span>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {countries.length === 0 && (\n          <div className=\"text-center py-12\">\n            <div className=\"text-6xl mb-4\">üç≥</div>\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">No data available</h3>\n            <p className=\"text-gray-600 mb-6\">Click \"Refresh Data\" to fetch all countries</p>\n            <button\n              onClick={handleRefresh}\n              disabled={loading}\n              className=\"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50\"\n            >\n              {loading ? 'Fetching...' : 'Fetch All Countries'}\n            </button>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n} "],"names":[],"mappings":";;;;AAEA;AACA;;;AAHA;;;AAsBe,SAAS;;IACtB,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB,EAAE;IAC5D,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAoB,EAAE;IAC7D,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACzC,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC7C,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAqB;IACxD,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAkB;IAE3D,mBAAmB;IACnB,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAU;IACjE,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAU;IACjE,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAsB,EAAE;IAC3E,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAErD,MAAM,kBAAkB,IAAI,oIAAA,CAAA,kBAAe;IAE3C,2BAA2B;IAC3B,MAAM,oBAAoB;QACxB,IAAI;YACF,YAAY;YACZ,QAAQ,GAAG,CAAC;YAEZ,MAAM,OAAO,MAAM,gBAAgB,eAAe;YAElD,QAAQ,GAAG,CAAC,8BAA8B,KAAK,MAAM,EAAE;YACvD,aAAa;YAEb,kCAAkC;YAClC,MAAM,oBAAoB,yBAAyB;YACnD,YAAY;QAEd,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,oCAAoC;YAClD,QAAQ,KAAK,CAAC,0BAA0B;YACxC,WAAW;YACX,YAAY;YAEZ,4BAA4B;YAC5B,YAAY;gBACV;oBACE,IAAI;oBACJ,OAAO;oBACP,SAAS,AAAC,mCAA2F,OAAzD,iBAAiB,QAAQ,MAAM,OAAO,GAAG,iBAAgB;oBACrG,UAAU;oBACV,MAAM;wBAAC;wBAAO;qBAAQ;oBACtB,YAAY,IAAI,OAAO,WAAW;gBACpC;aACD;YACD;QACF,SAAU;YACR,WAAW;YACX,YAAY;QACd;IACF;IAEA,wCAAwC;IACxC,MAAM,2BAA2B,CAAC;QAChC,MAAM,iBAAiB,KAAK,MAAM;QAClC,MAAM,kBAAkB,KAAK,MAAM,CAAC,CAAC,KAAK,UAAY,MAAM,QAAQ,UAAU,EAAE;QAChF,MAAM,UAAU;eAAI,IAAI,IAAI,KAAK,GAAG,CAAC,CAAA,UAAW,QAAQ,MAAM;SAAG;QACjE,MAAM,uBAAuB,KAAK,MAAM,CAAC,CAAA,UAAW,QAAQ,WAAW,EAAE,MAAM;QAC/E,MAAM,YAAY,KAAK,MAAM,CAAC,CAAA,UAAW,QAAQ,QAAQ,EAAE,MAAM;QAEjE,OAAO;YACL;gBACE,IAAI;gBACJ,OAAO;gBACP,SAAS,AAAC,GAAyD,OAAvD,gBAAe,0CAAyE,OAAjC,gBAAgB,cAAc,IAAG;gBACpG,UAAU;gBACV,MAAM;oBAAC;oBAAU;iBAAa;gBAC9B,YAAY,IAAI,OAAO,WAAW;YACpC;YACA;gBACE,IAAI;gBACJ,OAAO;gBACP,SAAS,AAAC,2BAAqD,OAA3B,QAAQ,MAAM,EAAC,cAA+B,OAAnB,QAAQ,IAAI,CAAC;gBAC5E,UAAU;gBACV,MAAM;oBAAC;oBAAa;iBAAU;gBAC9B,YAAY,IAAI,OAAO,WAAW;YACpC;YACA;gBACE,IAAI;gBACJ,OAAO;gBACP,SAAS,AAAC,GAAiD,OAA/C,sBAAqB,4BAA4E,OAAlD,WAAU,0CAAyH,OAAjF,KAAK,MAAM,CAAC,CAAA,IAAK,EAAE,WAAW,KAAK,aAAa,EAAE,QAAQ,KAAK,WAAW,MAAM,EAAC;gBAC9L,UAAU;gBACV,MAAM;oBAAC;oBAAY;iBAAS;gBAC5B,YAAY,IAAI,OAAO,WAAW;YACpC;YACA;gBACE,IAAI;gBACJ,OAAO;gBACP,SAAS,AAAC,mCAAgG,OAA9D,KAAK,KAAK,CAAC,kBAAkB,gBAAgB,cAAc,IAAG;gBAC1G,UAAU;gBACV,MAAM;oBAAC;oBAAgB;iBAAa;gBACpC,YAAY,IAAI,OAAO,WAAW;YACpC;YACA;gBACE,IAAI;gBACJ,OAAO;gBACP,SAAS,AAAC,qBAAmC,OAAf,gBAAe;gBAC7C,UAAU;gBACV,MAAM;oBAAC;oBAAQ;iBAAW;gBAC1B,YAAY,IAAI,OAAO,WAAW;YACpC;SACD;IACH;IAEA,8BAA8B;IAC9B,MAAM,qBAAqB;QACzB,IAAI,CAAC,oBAAoB,CAAC,kBAAkB;QAE5C,MAAM,WAAW,UAAU,IAAI,CAAC,CAAA,IAAK,EAAE,IAAI,CAAC,MAAM,KAAK;QACvD,MAAM,WAAW,UAAU,IAAI,CAAC,CAAA,IAAK,EAAE,IAAI,CAAC,MAAM,KAAK;QAEvD,IAAI,CAAC,YAAY,CAAC,UAAU;QAE5B,MAAM,UAA8B;YAClC;gBACE,MAAM;gBACN,QAAQ,SAAS,UAAU;gBAC3B,QAAQ,SAAS,UAAU;gBAC3B,MAAM;gBACN,QAAQ,SAAS,UAAU,GAAG,SAAS,UAAU,GAAG,aAC5C,SAAS,UAAU,GAAG,SAAS,UAAU,GAAG,aAAa;YACnE;YACA;gBACE,MAAM;gBACN,QAAQ,SAAS,IAAI,IAAI;gBACzB,QAAQ,SAAS,IAAI,IAAI;gBACzB,MAAM;gBACN,QAAQ,CAAC,SAAS,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,IAAI,aAC9C,CAAC,SAAS,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,IAAI,aAAa;YACrE;YACA;gBACE,MAAM;gBACN,QAAQ,SAAS,IAAI,GAAG,KAAK,KAAK,CAAC,SAAS,UAAU,GAAG,SAAS,IAAI,IAAI;gBAC1E,QAAQ,SAAS,IAAI,GAAG,KAAK,KAAK,CAAC,SAAS,UAAU,GAAG,SAAS,IAAI,IAAI;gBAC1E,MAAM;gBACN,QAAQ,CAAC,SAAS,IAAI,GAAG,KAAK,KAAK,CAAC,SAAS,UAAU,GAAG,SAAS,IAAI,IAAI,CAAC,IACpE,CAAC,SAAS,IAAI,GAAG,KAAK,KAAK,CAAC,SAAS,UAAU,GAAG,SAAS,IAAI,IAAI,CAAC,IAAI,aACxE,CAAC,SAAS,IAAI,GAAG,KAAK,KAAK,CAAC,SAAS,UAAU,GAAG,SAAS,IAAI,IAAI,CAAC,IACpE,CAAC,SAAS,IAAI,GAAG,KAAK,KAAK,CAAC,SAAS,UAAU,GAAG,SAAS,IAAI,IAAI,CAAC,IAAI,aAAa;YAC/F;SACD;QAED,kBAAkB;QAClB,kBAAkB;IACpB;IAEA,4BAA4B;IAC5B,MAAM,6BAA6B,UAChC,MAAM,CAAC,CAAA,UACN,QAAQ,IAAI,CAAC,MAAM,CAAC,WAAW,GAAG,QAAQ,CAAC,WAAW,WAAW,OACjE,QAAQ,IAAI,CAAC,QAAQ,CAAC,WAAW,GAAG,QAAQ,CAAC,WAAW,WAAW,OACnE,QAAQ,MAAM,CAAC,WAAW,GAAG,QAAQ,CAAC,WAAW,WAAW,OAC5D,QAAQ,OAAO,CAAC,IAAI,CAAC,CAAA,MAAO,IAAI,WAAW,GAAG,QAAQ,CAAC,WAAW,WAAW,MAE9E,IAAI,CAAC,CAAC,GAAG;QACR,IAAI,SAAc,CAAC,CAAC,OAAO;QAC3B,IAAI,SAAc,CAAC,CAAC,OAAO;QAE3B,wBAAwB;QACxB,IAAI,WAAW,QAAQ;YACrB,SAAS,EAAE,IAAI,CAAC,MAAM;YACtB,SAAS,EAAE,IAAI,CAAC,MAAM;QACxB;QAEA,IAAI,OAAO,WAAW,YAAY,OAAO,WAAW,UAAU;YAC5D,OAAO,cAAc,QACjB,OAAO,aAAa,CAAC,UACrB,OAAO,aAAa,CAAC;QAC3B;QAEA,IAAI,OAAO,WAAW,YAAY,OAAO,WAAW,UAAU;YAC5D,OAAO,cAAc,QAAQ,SAAS,SAAS,SAAS;QAC1D;QAEA,OAAO;IACT;IAEF,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;gCAAE;YACR;QACF;+BAAG,EAAE;IAEL,MAAM,gBAAgB;QACpB,WAAW;QACX;IACF;IAEA,MAAM,aAAa,CAAC;QAClB,IAAI,WAAW,QAAQ;YACrB,aAAa,cAAc,QAAQ,SAAS;QAC9C,OAAO;YACL,UAAU;YACV,aAAa;QACf;IACF;IAEA,MAAM,mBAAmB,CAAC;QACxB,OAAQ;YACN,KAAK;gBAAY,OAAO;YACxB,KAAK;gBAAQ,OAAO;YACpB,KAAK;gBAAU,OAAO;YACtB,KAAK;gBAAO,OAAO;YACnB;gBAAS,OAAO;QAClB;IACF;IAEA,MAAM,iBAAiB,CAAC;QACtB,OAAO,OAAO,OAAO,CAAC,YACnB,GAAG,CAAC;gBAAC,CAAC,MAAM,SAAS;mBAAK,AAAC,GAAoB,OAAlB,SAAS,IAAI,EAAC,MAAoB,OAAhB,SAAS,MAAM,EAAC;WAC/D,IAAI,CAAC;IACV;IAEA,MAAM,kBAAkB,CAAC;QACvB,OAAO,OAAO,MAAM,CAAC,WAAW,IAAI,CAAC;IACvC;IAEA,MAAM,iBAAiB,CAAC,QAAgB;QACtC,IAAI,WAAW,OAAO,OAAO;QAC7B,IAAI,WAAW,cAAc,YAAY,OAAO;QAChD,IAAI,WAAW,cAAc,CAAC,YAAY,OAAO;QACjD,OAAO;IACT;IAEA,IAAI,SAAS;QACX,qBACE,6LAAC;YAAI,WAAU;sBACb,cAAA,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAG,WAAU;kCAA0B;;;;;;kCACxC,6LAAC;wBAAE,WAAU;kCACV,WAAW,mCAAmC;;;;;;kCAEjD,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAK,WAAU;;;;;;0CAChB,6LAAC;gCAAK,WAAU;gCAA+C,OAAO;oCAAC,gBAAgB;gCAAM;;;;;;0CAC7F,6LAAC;gCAAK,WAAU;gCAA+C,OAAO;oCAAC,gBAAgB;gCAAM;;;;;;;;;;;;;;;;;;;;;;;IAKvG;IAEA,qBACE,6LAAC;QAAI,WAAU;;0BAEb,6LAAC;gBAAO,WAAU;0BAChB,cAAA,6LAAC;oBAAI,WAAU;8BACb,cAAA,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAI,WAAU;;kDACb,6LAAC;wCAAG,WAAU;kDAAmC;;;;;;kDACjD,6LAAC;wCAAK,WAAU;kDAA4E;;;;;;;;;;;;0CAI9F,6LAAC;gCAAI,WAAU;0CACb,cAAA,6LAAC;oCACC,SAAS;oCACT,UAAU;oCACV,WAAU;8CAET,UAAU,kBAAkB;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAQvC,6LAAC;gBAAK,WAAU;;kCAEd,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAG,WAAU;0CAAwC;;;;;;0CAEtD,6LAAC;gCAAI,WAAU;;kDACb,6LAAC;;0DACC,6LAAC;gDAAM,WAAU;0DAA+C;;;;;;0DAGhE,6LAAC;gDACC,OAAO;gDACP,UAAU,CAAC,IAAM,oBAAoB,EAAE,MAAM,CAAC,KAAK;gDACnD,WAAU;;kEAEV,6LAAC;wDAAO,OAAM;kEAAG;;;;;;oDAChB,UAAU,GAAG,CAAC,CAAC,wBACd,6LAAC;4DAAiC,OAAO,QAAQ,IAAI,CAAC,MAAM;sEACzD,QAAQ,IAAI,CAAC,MAAM;2DADT,QAAQ,IAAI,CAAC,MAAM;;;;;;;;;;;;;;;;;kDAOtC,6LAAC;;0DACC,6LAAC;gDAAM,WAAU;0DAA+C;;;;;;0DAGhE,6LAAC;gDACC,OAAO;gDACP,UAAU,CAAC,IAAM,oBAAoB,EAAE,MAAM,CAAC,KAAK;gDACnD,WAAU;;kEAEV,6LAAC;wDAAO,OAAM;kEAAG;;;;;;oDAChB,UAAU,GAAG,CAAC,CAAC,wBACd,6LAAC;4DAAiC,OAAO,QAAQ,IAAI,CAAC,MAAM;sEACzD,QAAQ,IAAI,CAAC,MAAM;2DADT,QAAQ,IAAI,CAAC,MAAM;;;;;;;;;;;;;;;;;;;;;;;0CAQxC,6LAAC;gCACC,SAAS;gCACT,UAAU,CAAC,oBAAoB,CAAC;gCAChC,WAAU;0CACX;;;;;;;;;;;;oBAMF,kBAAkB,eAAe,MAAM,GAAG,mBACzC,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAG,WAAU;0CAAuC;;;;;;0CAErD,6LAAC;gCAAI,WAAU;0CACZ,eAAe,GAAG,CAAC,CAAC,QAAQ,sBAC3B,6LAAC;wCAAgB,WAAU;;0DACzB,6LAAC;gDAAG,WAAU;0DAA4C,OAAO,IAAI;;;;;;0DAErE,6LAAC;gDAAI,WAAU;;kEACb,6LAAC;wDAAI,WAAW,AAAC,kBAAqD,OAApC,eAAe,OAAO,MAAM,EAAE;;0EAC9D,6LAAC;gEAAI,WAAU;0EAAuB;;;;;;0EACtC,6LAAC;gEAAI,WAAU;;oEACZ,OAAO,MAAM,CAAC,cAAc;oEAAG;oEAAE,OAAO,IAAI;;;;;;;;;;;;;kEAIjD,6LAAC;wDAAI,WAAU;kEAA4B;;;;;;kEAE3C,6LAAC;wDAAI,WAAW,AAAC,kBAAsD,OAArC,eAAe,OAAO,MAAM,EAAE;;0EAC9D,6LAAC;gEAAI,WAAU;0EAAuB;;;;;;0EACtC,6LAAC;gEAAI,WAAU;;oEACZ,OAAO,MAAM,CAAC,cAAc;oEAAG;oEAAE,OAAO,IAAI;;;;;;;;;;;;;;;;;;;0DAKnD,6LAAC;gDAAI,WAAU;0DACZ,OAAO,MAAM,KAAK,sBACjB,6LAAC;oDAAK,WAAU;8DAAgG;;;;;yEAIhH,6LAAC;oDAAK,WAAU;;wDAAkG;wDACpG,OAAO,MAAM,KAAK,aAAa,mBAAmB;;;;;;;;;;;;;uCA5B5D;;;;;;;;;;;;;;;;kCAuClB,6LAAC;wBAAI,WAAU;kCACb,cAAA,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCAAI,WAAU;8CACb,cAAA,6LAAC;wCACC,MAAK;wCACL,aAAY;wCACZ,OAAO;wCACP,UAAU,CAAC,IAAM,cAAc,EAAE,MAAM,CAAC,KAAK;wCAC7C,WAAU;;;;;;;;;;;8CAGd,6LAAC;oCAAI,WAAU;;wCAAwB;wCAC5B,2BAA2B,MAAM;wCAAC;wCAAK,UAAU,MAAM;wCAAC;;;;;;;;;;;;;;;;;;kCAMvE,6LAAC;wBAAI,WAAU;kCACb,cAAA,6LAAC;4BAAI,WAAU;sCACb,cAAA,6LAAC;gCAAM,WAAU;;kDACf,6LAAC;wCAAM,WAAU;kDACf,cAAA,6LAAC;;8DACC,6LAAC;oDAAG,WAAU;oDAAkH,SAAS,IAAM,WAAW;8DACxJ,cAAA,6LAAC;wDAAI,WAAU;;4DAAoB;4DAEhC,WAAW,wBACV,6LAAC;gEAAK,WAAU;0EAAQ,cAAc,QAAQ,MAAM;;;;;;;;;;;;;;;;;8DAI1D,6LAAC;oDAAG,WAAU;oDAAkH,SAAS,IAAM,WAAW;8DACxJ,cAAA,6LAAC;wDAAI,WAAU;;4DAAoB;4DAEhC,WAAW,8BACV,6LAAC;gEAAK,WAAU;0EAAQ,cAAc,QAAQ,MAAM;;;;;;;;;;;;;;;;;8DAI1D,6LAAC;oDAAG,WAAU;oDAAkH,SAAS,IAAM,WAAW;8DACxJ,cAAA,6LAAC;wDAAI,WAAU;;4DAAoB;4DAEhC,WAAW,0BACV,6LAAC;gEAAK,WAAU;0EAAQ,cAAc,QAAQ,MAAM;;;;;;;;;;;;;;;;;8DAI1D,6LAAC;oDAAG,WAAU;8DAAiF;;;;;;8DAG/F,6LAAC;oDAAG,WAAU;oDAAkH,SAAS,IAAM,WAAW;8DACxJ,cAAA,6LAAC;wDAAI,WAAU;;4DAAoB;4DAEhC,WAAW,wBACV,6LAAC;gEAAK,WAAU;0EAAQ,cAAc,QAAQ,MAAM;;;;;;;;;;;;;;;;;8DAI1D,6LAAC;oDAAG,WAAU;8DAAiF;;;;;;8DAG/F,6LAAC;oDAAG,WAAU;8DAAiF;;;;;;8DAG/F,6LAAC;oDAAG,WAAU;8DAAiF;;;;;;8DAG/F,6LAAC;oDAAG,WAAU;8DAAiF;;;;;;;;;;;;;;;;;kDAKnG,6LAAC;wCAAM,WAAU;kDACd,2BAA2B,GAAG,CAAC,CAAC,SAAS,sBACxC,6LAAC;gDAAe,WAAU;;kEACxB,6LAAC;wDAAG,WAAU;kEACZ,cAAA,6LAAC;4DAAI,WAAU;;8EACb,6LAAC;oEACC,KAAK,QAAQ,KAAK,CAAC,GAAG;oEACtB,KAAK,QAAQ,KAAK,CAAC,GAAG;oEACtB,WAAU;;;;;;8EAEZ,6LAAC;;sFACC,6LAAC;4EAAI,WAAU;sFAAqC,QAAQ,IAAI,CAAC,MAAM;;;;;;sFACvE,6LAAC;4EAAI,WAAU;sFAAyB,QAAQ,IAAI,CAAC,QAAQ;;;;;;;;;;;;;;;;;;;;;;;kEAInE,6LAAC;wDAAG,WAAU;kEACX,QAAQ,UAAU,CAAC,cAAc;;;;;;kEAEpC,6LAAC;wDAAG,WAAU;;4DACX,QAAQ,MAAM;4DACd,QAAQ,SAAS,kBAChB,6LAAC;gEAAI,WAAU;0EAAyB,QAAQ,SAAS;;;;;;;;;;;;kEAG7D,6LAAC;wDAAG,WAAU;kEACX,QAAQ,OAAO,CAAC,IAAI,CAAC;;;;;;kEAExB,6LAAC;wDAAG,WAAU;kEACX,QAAQ,IAAI,GAAG,QAAQ,IAAI,CAAC,cAAc,KAAK;;;;;;kEAElD,6LAAC;wDAAG,WAAU;kEACX,QAAQ,UAAU,GAAG,eAAe,QAAQ,UAAU,IAAI;;;;;;kEAE7D,6LAAC;wDAAG,WAAU;kEACX,QAAQ,SAAS,GAAG,gBAAgB,QAAQ,SAAS,IAAI;;;;;;kEAE5D,6LAAC;wDAAG,WAAU;kEACZ,cAAA,6LAAC;4DAAI,WAAU;sEACZ,QAAQ,SAAS,GAAG,QAAQ,SAAS,CAAC,IAAI,CAAC,QAAQ;;;;;;;;;;;kEAGxD,6LAAC;wDAAG,WAAU;kEACZ,cAAA,6LAAC;4DAAI,WAAU;;gEACZ,QAAQ,WAAW,kBAClB,6LAAC;oEAAK,WAAU;8EAAkG;;;;;;gEAInH,QAAQ,QAAQ,kBACf,6LAAC;oEAAK,WAAU;8EAAgG;;;;;;gEAIjH,CAAC,QAAQ,WAAW,IAAI,CAAC,QAAQ,QAAQ,kBACxC,6LAAC;oEAAK,WAAU;8EAAwB;;;;;;;;;;;;;;;;;;+CArDvC;;;;;;;;;;;;;;;;;;;;;;;;;;kCAiEnB,6LAAC;wBAAI,WAAU;kCACZ,SAAS,GAAG,CAAC,CAAC,wBACb,6LAAC;gCAAqB,WAAU;0CAC9B,cAAA,6LAAC;oCAAI,WAAU;;sDACb,6LAAC;4CAAI,WAAU;;8DACb,6LAAC;oDAAG,WAAU;8DAAuC,QAAQ,KAAK;;;;;;8DAClE,6LAAC;oDAAK,WAAW,AAAC,8CAAgF,OAAnC,iBAAiB,QAAQ,QAAQ;8DAC7F,QAAQ,QAAQ;;;;;;;;;;;;sDAGrB,6LAAC;4CAAE,WAAU;sDAAsB,QAAQ,OAAO;;;;;;sDAClD,6LAAC;4CAAI,WAAU;;8DACb,6LAAC;oDAAI,WAAU;8DACZ,QAAQ,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,sBACtB,6LAAC;4DAAiB,WAAU;sEACzB;2DADQ;;;;;;;;;;8DAKf,6LAAC;oDAAK,WAAU;8DACb,IAAI,KAAK,QAAQ,UAAU,EAAE,kBAAkB;;;;;;;;;;;;;;;;;;+BAlB9C,QAAQ,EAAE;;;;;;;;;;oBA0BvB,UAAU,MAAM,KAAK,mBACpB,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAI,WAAU;0CAAgB;;;;;;0CAC/B,6LAAC;gCAAG,WAAU;0CAA2C;;;;;;0CACzD,6LAAC;gCAAE,WAAU;0CAAqB;;;;;;0CAClC,6LAAC;gCACC,SAAS;gCACT,UAAU;gCACV,WAAU;0CAET,UAAU,gBAAgB;;;;;;;;;;;;;;;;;;;;;;;;AAOzC;GAxiBwB;KAAA","debugId":null}}]
}